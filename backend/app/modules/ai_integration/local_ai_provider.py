import asyncio
import logging
import random
import re
from datetime import datetime
from typing import Any, Dict, List, Optional

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å transformers
try:
    transformers_available = True
except (ImportError, OSError):
    transformers_available = False

from app.modules.ai_integration.base import AIProvider

logger = logging.getLogger(__name__)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
SEO_TEMPLATES = {
    'business': {
        'title_patterns': [
            '{topic} - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
            '{topic}: –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ',
            '–õ—É—á—à–∏–π {topic} –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ'
        ],
        'h1_patterns': [
            '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π {topic}',
            '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {topic} –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
            '{topic} - –Ω–∞—à –ø—Ä–æ—Ñ–∏–ª—å'
        ],
        'keywords_base': ['—É—Å–ª—É–≥–∏', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '–Ω–∞–¥–µ–∂–Ω—ã–π', '–æ–ø—ã—Ç']
    },
    'product': {
        'title_patterns': [
            '{topic} - –∫—É–ø–∏—Ç—å –≤—ã–≥–æ–¥–Ω–æ',
            '–õ—É—á—à–∏–π {topic} —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π',
            '{topic}: —Ü–µ–Ω—ã, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –æ—Ç–∑—ã–≤—ã'
        ],
        'h1_patterns': [
            '–ö—É–ø–∏—Ç—å {topic}',
            '{topic} - –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
            '–ö–∞—Ç–∞–ª–æ–≥ {topic}'
        ],
        'keywords_base': ['–∫—É–ø–∏—Ç—å', '—Ü–µ–Ω–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–∫–∞—á–µ—Å—Ç–≤–æ', '–≥–∞—Ä–∞–Ω—Ç–∏—è']
    },
    'informational': {
        'title_patterns': [
            '–í—Å–µ –æ {topic}: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
            '{topic} - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç {topic}'
        ],
        'h1_patterns': [
            '–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ {topic}',
            '–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ {topic}',
            '{topic}: –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ–±–∑–æ—Ä'
        ],
        'keywords_base': ['–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–æ–±–∑–æ—Ä', '—Å–æ–≤–µ—Ç—ã', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏']
    }
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
CONTENT_TEMPLATES = {
    'introduction': [
        '–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ {topic} –∏–≥—Ä–∞–µ—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ {context}.',
        '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {topic} ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ {context}.',
        '–í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ {topic} –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ {context}.'
    ],
    'benefits': [
        '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ {topic} –≤–∫–ª—é—á–∞—é—Ç –≤ —Å–µ–±—è:',
        '–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ {topic}:',
        '–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ {topic}:'
    ],
    'features': [
        '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å',
        '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É',
        '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á',
        '–ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤',
        '–ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≤—Å–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç'
    ],
    'conclusion': [
        '–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ {topic}.',
        '–ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π {topic} –¥–ª—è –≤–∞—à–∏—Ö –Ω—É–∂–¥.',
        '–ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ {topic} —É–∂–µ —Å–µ–≥–æ–¥–Ω—è.'
    ]
}


class LocalAIProvider(AIProvider):
    """–õ–æ–∫–∞–ª—å–Ω—ã–π AI Provider - –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""

    def __init__(self) -> None:
        self.model_name = "local-fallback"
        self.available = True  # –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ fallback —Ä–µ–∂–∏–º–µ
        logger.info("–õ–æ–∫–∞–ª—å–Ω—ã–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (fallback —Ä–µ–∂–∏–º)")

    async def enhance_content(
        self, content: str, enhancement_type: str = "general"
    ) -> str:
        """–£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é AI"""
        if enhancement_type == "seo":
            return await self._enhance_content_for_seo(content)
        elif enhancement_type == "accessibility":
            return await self._enhance_content_for_accessibility(content)
        elif enhancement_type == "marketing":
            return await self._enhance_content_for_marketing(content)
        else:
            return await self._enhance_content_general(content)

    async def _enhance_content_for_seo(self, content: str) -> str:
        """–£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è SEO"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—É—é —Ç–µ–º—É –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        topic = self._extract_main_topic(content)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π SEO-–∫–æ–Ω—Ç–µ–Ω—Ç
        enhanced_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–∏–µ
        intro_template = random.choice(CONTENT_TEMPLATES['introduction'])
        enhanced_parts.append(intro_template.format(topic=topic, context="–±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞—Ö"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        enhanced_parts.append(f"\n\n{content}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        benefits_intro = random.choice(CONTENT_TEMPLATES['benefits'])
        enhanced_parts.append(f"\n\n{benefits_intro.format(topic=topic)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
        features = random.sample(CONTENT_TEMPLATES['features'], 3)
        for i, feature in enumerate(features, 1):
            enhanced_parts.append(f"\n{i}. {feature}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        conclusion = random.choice(CONTENT_TEMPLATES['conclusion'])
        enhanced_parts.append(f"\n\n{conclusion.format(topic=topic)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é SEO-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        enhanced_parts.append(f"\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {topic}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥.")
        
        await asyncio.sleep(0.2)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return ''.join(enhanced_parts)

    async def _enhance_content_for_accessibility(self, content: str) -> str:
        """–£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        enhanced = f"""
        {content}
        
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:
        ‚Ä¢ –í–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º —á—Ç–µ–Ω–∏—è —Å —ç–∫—Ä–∞–Ω–∞
        ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ HTML-—Ç–µ–≥–∏ –¥–ª—è –ª—É—á—à–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º WCAG
        ‚Ä¢ –í—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        ‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        await asyncio.sleep(0.1)
        return enhanced

    async def _enhance_content_for_marketing(self, content: str) -> str:
        """–£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞"""
        topic = self._extract_main_topic(content)
        enhanced = f"""
        üöÄ {content}
        
        ‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—à–µ–≥–æ {topic}:
        ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
        ‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
        ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        ‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ
        ‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≤—Å–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç
        
        üìû –ó–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
        üí∞ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        üéØ –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        """
        await asyncio.sleep(0.1)
        return enhanced

    async def _enhance_content_general(self, content: str) -> str:
        """–û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        topic = self._extract_main_topic(content)
        enhanced = f"""
        {content}
        
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
        {topic} —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω—ã–º –∞—Å–ø–µ–∫—Ç–æ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ {topic} 
        –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã.
        
        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
        ‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –≤–∞—à–µ–π —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        ‚Ä¢ –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
        ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏
        """
        await asyncio.sleep(0.1)
        return enhanced

    def _extract_main_topic(self, content: str) -> str:
        """–ò–∑–≤–ª–µ—á—å –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º—ã
        words = re.findall(r'\b\w{4,}\b', content.lower())
        if not words:
            return "—É—Å–ª—É–≥–∞"
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        stop_words = {'—ç—Ç–æ—Ç', '–∫–æ—Ç–æ—Ä—ã–π', '–º–æ–∂–µ—Ç', '–±—ã—Ç—å', '–µ—Å—Ç—å', '–¥–ª—è', '–∏–ª–∏', '–∫–∞–∫', '—á—Ç–æ', '–∫–æ–≥–¥–∞', '–≥–¥–µ'}
        meaningful_words = [w for w in words if w not in stop_words]
        
        if meaningful_words:
            return meaningful_words[0]
        return "—É—Å–ª—É–≥–∞"

    async def generate_meta_tags(self, content: str) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ SEO –º–µ—Ç–∞-—Ç–µ–≥–∏"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É
        topic = self._extract_main_topic(content)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
        content_type = self._determine_content_type(content)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º title —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–æ–≤
        title = self._generate_seo_title(topic, content_type, content)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º description
        description = self._generate_seo_description(topic, content_type, content)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º keywords
        keywords = self._generate_seo_keywords(topic, content_type, content)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π SEO
        additional_meta = self._generate_additional_meta_tags(content, topic)
        
        result = {
            "title": title,
            "description": description,
            "keywords": keywords,
            **additional_meta
        }
        
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return result

    def _determine_content_type(self, content: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ SEO —à–∞–±–ª–æ–Ω–∞"""
        content_lower = content.lower()
        
        # –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        commercial_indicators = ['–∫—É–ø–∏—Ç—å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—É—Å–ª—É–≥–∞', '–ø—Ä–æ–¥–∞–∂–∞']
        if any(indicator in content_lower for indicator in commercial_indicators):
            return 'business'
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        info_indicators = ['–∫–∞–∫', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–ø–æ—á–µ–º—É', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–æ–±–∑–æ—Ä']
        if any(indicator in content_lower for indicator in info_indicators):
            return 'informational'
        
        # –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        product_indicators = ['—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–º–æ–¥–µ–ª—å', '—Ñ—É–Ω–∫—Ü–∏–∏', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏']
        if any(indicator in content_lower for indicator in product_indicators):
            return 'product'
        
        return 'business'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def _generate_seo_title(self, topic: str, content_type: str, content: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π title"""
        template_group = SEO_TEMPLATES.get(content_type, SEO_TEMPLATES['business'])
        title_template = random.choice(template_group['title_patterns'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º title —Å —É—á–µ—Ç–æ–º –¥–ª–∏–Ω—ã (30-60 —Å–∏–º–≤–æ–ª–æ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ)
        title = title_template.format(topic=topic.title())
        
        # –ï—Å–ª–∏ title —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—â–∞–µ–º
        if len(title) > 60:
            title = f"{topic.title()} - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"
        
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
        if len(title) < 30:
            title += f" | –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏"
        
        return title

    def _generate_seo_description(self, topic: str, content_type: str, content: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        first_sentence = content.split('.')[0] if '.' in content else content[:80]
        
        # –ë–∞–∑–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        description_templates = {
            'business': f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π {topic} –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤. {first_sentence}. –ö–∞—á–µ—Å—Ç–≤–æ, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏.",
            'product': f"–õ—É—á—à–∏–π {topic} –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º. {first_sentence}. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –æ—Ç–∑—ã–≤—ã, –¥–æ—Å—Ç–∞–≤–∫–∞. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.",
            'informational': f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {topic}. {first_sentence}. –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —Å–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        }
        
        description = description_templates.get(content_type, description_templates['business'])
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É description (120-160 —Å–∏–º–≤–æ–ª–æ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ)
        if len(description) > 160:
            description = description[:157] + "..."
        elif len(description) < 120:
            description += f" –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ {topic} –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."
        
        return description

    def _generate_seo_keywords(self, topic: str, content_type: str, content: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SEO keywords"""
        # –ë–∞–∑–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
        template_group = SEO_TEMPLATES.get(content_type, SEO_TEMPLATES['business'])
        base_keywords = template_group['keywords_base'].copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É
        keywords = [topic]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ keywords
        keywords.extend(base_keywords[:4])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ keywords –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_words = re.findall(r'\b[–∞-—è—ë]{4,}\b', content.lower())
        stop_words = {'—ç—Ç–æ—Ç', '–∫–æ—Ç–æ—Ä—ã–π', '–º–æ–∂–µ—Ç', '–±—ã—Ç—å', '–µ—Å—Ç—å', '–¥–ª—è', '–∏–ª–∏', '–∫–∞–∫', '—á—Ç–æ', 
                     '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—Å–ª–µ', '–ø–µ—Ä–µ–¥', '—á–µ—Ä–µ–∑', '–º–µ–∂–¥—É', '—Å–µ–π—á–∞—Å', '–≤—Å–µ–≥–¥–∞'}
        
        content_keywords = [word for word in content_words if word not in stop_words][:3]
        keywords.extend(content_keywords)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        unique_keywords = list(dict.fromkeys(keywords))[:8]
        
        return ", ".join(unique_keywords)

    async def generate_structured_headings(self, content: str) -> Dict[str, List[str]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ H1-H3"""
        topic = self._extract_main_topic(content)
        content_type = self._determine_content_type(content)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π H1
        template_group = SEO_TEMPLATES.get(content_type, SEO_TEMPLATES['business'])
        h1_template = random.choice(template_group['h1_patterns'])
        h1 = h1_template.format(topic=topic.title())
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º H2 –∑–∞–≥–æ–ª–æ–≤–∫–∏
        h2_headings = [
            f"–ß—Ç–æ —Ç–∞–∫–æ–µ {topic}?",
            f"–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ {topic}",
            f"–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å {topic}?",
            f"–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞–º?"
        ]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º H3 –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
        h3_headings = [
            f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {topic}",
            f"–°—Ñ–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è {topic}",
            f"–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ {topic}",
            f"–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ {topic}",
            f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é {topic}",
            f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ {topic}"
        ]
        
        await asyncio.sleep(0.1)
        return {
            "h1": [h1],
            "h2": h2_headings[:3],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 H2
            "h3": h3_headings[:5]   # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 H3
        }

    async def generate_key_phrases(self, content: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è SEO"""
        topic = self._extract_main_topic(content)
        content_type = self._determine_content_type(content)
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        phrase_templates = {
            'business': [
                f"–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π {topic}",
                f"–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ {topic}",
                f"{topic} –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º",
                f"–ª—É—á—à–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ {topic}",
                f"–Ω–∞–¥–µ–∂–Ω—ã–π {topic} –≤ –ú–æ—Å–∫–≤–µ",
                f"–∑–∞–∫–∞–∑–∞—Ç—å {topic} –Ω–µ–¥–æ—Ä–æ–≥–æ"
            ],
            'product': [
                f"–∫—É–ø–∏—Ç—å {topic}",
                f"{topic} —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π",
                f"—Ü–µ–Ω—ã –Ω–∞ {topic}",
                f"—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {topic}",
                f"–æ—Ç–∑—ã–≤—ã –æ {topic}",
                f"–ª—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ {topic}"
            ],
            'informational': [
                f"–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å {topic}",
                f"—á—Ç–æ —Ç–∞–∫–æ–µ {topic}",
                f"—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ {topic}",
                f"—Å–æ–≤–µ—Ç—ã –ø–æ {topic}",
                f"–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ {topic}",
                f"–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ {topic}"
            ]
        }
        
        base_phrases = phrase_templates.get(content_type, phrase_templates['business'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω–æ—Ö–≤–æ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
        long_tail_phrases = [
            f"–∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞—Ç—å {topic} –¥–ª—è –¥–æ–º–∞",
            f"—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {topic}",
            f"–≥–¥–µ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–π {topic} –≤ –ú–æ—Å–∫–≤–µ",
            f"–ø–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–∞—à {topic}"
        ]
        
        all_phrases = base_phrases + long_tail_phrases[:2]
        
        await asyncio.sleep(0.1)
        return all_phrases[:8]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    async def generate_alt_texts(self, content: str, image_count: int = 3) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å alt-—Ç–µ–∫—Å—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        topic = self._extract_main_topic(content)
        
        # –®–∞–±–ª–æ–Ω—ã alt-—Ç–µ–∫—Å—Ç–æ–≤
        alt_templates = [
            f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π {topic} - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏",
            f"–ü—Ä–∏–º–µ—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ {topic} —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π",
            f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ {topic} –∑–∞ —Ä–∞–±–æ—Ç–æ–π",
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ {topic}",
            f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è {topic}",
            f"–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ {topic}",
            f"–ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ {topic}",
            f"–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ {topic}"
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ alt-—Ç–µ–∫—Å—Ç–æ–≤
        selected_alts = alt_templates[:image_count]
        
        await asyncio.sleep(0.1)
        return selected_alts

    async def generate_expanded_content(self, content: str, target_word_count: int = 500) -> str:
        """–£–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä–µ–º –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        topic = self._extract_main_topic(content)
        content_type = self._determine_content_type(content)
        
        # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        current_word_count = len(content.split())
        
        if current_word_count >= target_word_count:
            return content  # –£–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤
        
        expanded_parts = [content]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        additional_sections = [
            f"""

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ {topic}

–í –Ω–∞—à–µ –≤—Ä–µ–º—è {topic} –ø—Ä–µ—Ç–µ—Ä–ø–µ–ª –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º–µ—Ç–æ–¥–∏–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –º–µ–Ω—å—à–∏—Ö –∑–∞—Ç—Ä–∞—Ç–∞—Ö –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤. –ö–ª—é—á–µ–≤—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ —É—Å–ø–µ—Ö–∞ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á.""",
            
            f"""

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞

–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ø–æ {topic} –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏. –û–ø—ã—Ç–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –∑–Ω–∞—é—Ç –≤—Å–µ –Ω—é–∞–Ω—Å—ã —Ä–∞–±–æ—Ç—ã —Å {topic}, —É–º–µ—é—Ç –ø—Ä–µ–¥—É–≥–∞–¥—ã–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –ø–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ—Å–ª–µ–≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å–µ—Ä–≤–∏—Å.""",
            
            f"""

–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {topic}

–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä {topic} ‚Äî —ç—Ç–æ —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞, —Ç—Ä–µ–±—É—é—â–∞—è —É—á–µ—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤. –û—Å–Ω–æ–≤–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ —è–≤–ª—è—é—Ç—Å—è: –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç. –ù–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤, –Ω–∞–ª–∏—á–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º."""
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
        for section in additional_sections:
            expanded_parts.append(section)
            current_text = ''.join(expanded_parts)
            if len(current_text.split()) >= target_word_count:
                break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        expanded_parts.append(f"""

–ó–∞–∫–ª—é—á–µ–Ω–∏–µ

VUL–≤—ã–±–æ—Ä {topic} ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –û–±—Ä–∞—â–∞—è—Å—å –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º, –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —É—Å–ª—É–≥. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏ {topic} —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.""")
        
        result = ''.join(expanded_parts)
        await asyncio.sleep(0.2)
        return result

    def _generate_additional_meta_tags(self, content: str, topic: str) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π SEO"""
        return {
            # Open Graph —Ç–µ–≥–∏
            'og:type': 'website',
            'og:title': f"{topic.title()} - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
            'og:description': content[:100] + "..." if len(content) > 100 else content,
            'og:image': '/images/default-og-image.jpg',
            
            # Twitter Card —Ç–µ–≥–∏
            'twitter:card': 'summary_large_image',
            'twitter:title': f"{topic.title()} - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏",
            'twitter:description': content[:120] + "..." if len(content) > 120 else content,
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ SEO —Ç–µ–≥–∏
            'robots': 'index, follow',
            'author': 'AI Content Generator',
            'viewport': 'width=device-width, initial-scale=1.0',
            'canonical': f'/services/{topic.lower().replace(" ", "-")}',
            
            # Structured data hints
            'article:author': 'AI Content Generator',
            'article:section': topic.title(),
            'geo.region': 'RU',
            'geo.placename': '–†–æ—Å—Å–∏—è'
        }

    async def suggest_improvements(self, html: str) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è HTML –∫–æ–¥–∞"""
        suggestions: List[str] = []

        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ HTML
        if "<!DOCTYPE" not in html:
            suggestions.append("–î–æ–±–∞–≤—å—Ç–µ DOCTYPE –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ HTML5")

        if "lang=" not in html:
            suggestions.append("–£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ç–µ–≥–µ <html>")

        if "<meta charset=" not in html:
            suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8 –≤ –º–µ—Ç–∞-—Ç–µ–≥–∏")

        if "<title>" not in html:
            suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ç–µ–≥–µ <title>")

        if "viewport" not in html:
            suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–∞-—Ç–µ–≥ viewport –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏")

        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ
        if not suggestions:
            suggestions = [
                "–î–æ–±–∞–≤—å—Ç–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ HTML5 —Ç–µ–≥–∏ (header, nav, main, footer)",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ alt",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ H1-H6 –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                "–î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º",
            ]

        return suggestions[:5]

    async def generate_html_content(
        self, prompt: str, content_type: str = "webpage"
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞"""
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {prompt[:50]}...")

        return f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .container {{ max-width: 800px; margin: 0 auto; }}
        h1 {{ color: #333; }}
        .content {{ background: #f9f9f9; padding: 20px; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h1>
        <div class="content">
            <h2>–¢–µ–º–∞: {prompt}</h2>
            <p>–¢–∏–ø: {content_type}</p>
            <p>–°–æ–∑–¥–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã–º AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ {datetime.now().strftime("%H:%M")}</p>
        </div>
    </div>
</body>
</html>"""

    async def analyze_intention(self, message: str) -> Dict[str, str]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = message.lower()

        if any(word in message_lower for word in ["—Å–æ–∑–¥–∞–π", "—Å–¥–µ–ª–∞–π"]):
            return {
                "intent": "create",
                "action": "generate_html",
                "confidence": "high",
            }
        elif any(word in message_lower for word in ["—É–ª—É—á—à–∏", "–∏—Å–ø—Ä–∞–≤—å"]):
            return {
                "intent": "improve",
                "action": "enhance_content",
                "confidence": "high",
            }
        else:
            return {
                "intent": "general",
                "action": "chat",
                "confidence": "medium",
            }

    async def chat_completion(self, messages: List[Dict[str, str]]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞"""
        if not messages:
            return "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å–æ–∑–¥–∞—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?"

        last_message = messages[-1].get("content", "").lower()

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        responses = {
            "—Å–æ–∑–¥–∞–π": "–û—Ç–ª–∏—á–Ω–æ! –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å - –ª–µ–Ω–¥–∏–Ω–≥, –±–ª–æ–≥ –∏–ª–∏ –æ–±—ã—á–Ω—É—é –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É?",
            "–ø–æ–º–æ—â—å": "–Ø –º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.",
            "html": "–°–æ–∑–¥–∞–º HTML –∫–æ–¥ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é. –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –∏ —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã.",
            "css": "–ü–æ–º–æ–≥—É —Å–æ —Å—Ç–∏–ª—è–º–∏ CSS. –û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–∏–∑–∞–π–Ω.",
            "seo": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è SEO –∏ –ø—Ä–µ–¥–ª–æ–∂—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.",
        }

        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç
        for keyword, response in responses.items():
            if keyword in last_message:
                return response

        # –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        general_responses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π?",
            "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?",
            "–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à—É –∑–∞–¥–∞—á—É. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.",
        ]

        return random.choice(general_responses)

    async def get_provider_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ"""
        return {
            "provider": "local-ai",
            "model": self.model_name,
            "configured": self.available,
            "transformers_available": transformers_available,
            "ai_provider_setting": "–õ–æ–∫–∞–ª—å–Ω–∞—è AI –º–æ–¥–µ–ª—å (fallback —Ä–µ–∂–∏–º)",
        }
