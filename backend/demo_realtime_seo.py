#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è real-time SEO AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É SEO –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º –∏ AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º
–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç NLTK.
"""

import asyncio
import json
from datetime import datetime
from bs4 import BeautifulSoup


class SimpleSEOAnalyzer:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π SEO –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–µ–∑ NLTK"""
    
    def analyze_html(self, html):
        soup = BeautifulSoup(html, "html.parser")
        
        issues = []
        score = 100
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ title
        title = soup.find("title")
        if not title:
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç title —Ç–µ–≥")
            score -= 20
        elif len(title.get_text().strip()) < 30:
            issues.append("Title —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            score -= 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ meta description
        meta_desc = soup.find("meta", attrs={"name": "description"})
        if not meta_desc:
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç meta description")
            score -= 20
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ H1
        h1_tags = soup.find_all("h1")
        if not h1_tags:
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫")
            score -= 15
        elif len(h1_tags) > 1:
            issues.append("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ H1 –∑–∞–≥–æ–ª–æ–≤–∫–∏")
            score -= 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = soup.find_all("img")
        missing_alt = len([img for img in images if not img.get("alt")])
        if missing_alt > 0:
            issues.append(f"{missing_alt} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ alt –∞—Ç—Ä–∏–±—É—Ç–∞")
            score -= missing_alt * 5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ viewport
        if not soup.find("meta", attrs={"name": "viewport"}):
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç viewport meta —Ç–µ–≥")
            score -= 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ lang –∞—Ç—Ä–∏–±—É—Ç–∞
        html_tag = soup.find("html")
        if not html_tag or not html_tag.get("lang"):
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç lang –∞—Ç—Ä–∏–±—É—Ç")
            score -= 5
        
        return {
            "score": max(0, score),
            "issues": issues,
            "recommendations": [f"–ò—Å–ø—Ä–∞–≤–∏—Ç—å: {issue}" for issue in issues],
            "title": {
                "exists": bool(title),
                "text": title.get_text().strip() if title else "",
                "length": len(title.get_text().strip()) if title else 0
            },
            "meta_description": {
                "exists": bool(meta_desc),
                "text": meta_desc.get("content", "").strip() if meta_desc else "",
                "length": len(meta_desc.get("content", "").strip()) if meta_desc else 0
            },
            "images": {
                "total": len(images),
                "missing_alt": missing_alt
            }
        }


class SimpleAIService:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    async def suggest_improvements(self, html):
        # –ò–º–∏—Ç–∏—Ä—É–µ–º AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        await asyncio.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        suggestions = [
            "–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π title",
            "–£–ª—É—á—à–∏—Ç—å meta description",
            "–î–æ–±–∞–≤–∏—Ç—å alt –∞—Ç—Ä–∏–±—É—Ç—ã –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º",
            "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"
        ]
        
        return suggestions
    
    async def enhance_content(self, content, enhancement_type="seo_optimization"):
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏–µ HTML
        await asyncio.sleep(1.0)  # –ò–º–∏—Ç–∞—Ü–∏—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        soup = BeautifulSoup(content, "html.parser")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if not soup.find("title"):
            head = soup.find("head")
            if head:
                title_tag = soup.new_tag("title")
                title_tag.string = "–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - AI Generated"
                head.insert(0, title_tag)
        
        if not soup.find("meta", attrs={"name": "description"}):
            head = soup.find("head") 
            if head:
                meta_tag = soup.new_tag("meta", attrs={
                    "name": "description",
                    "content": "–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é AI –¥–ª—è –ª—É—á—à–µ–≥–æ SEO."
                })
                head.append(meta_tag)
        
        # –î–æ–±–∞–≤–ª—è–µ–º H1 –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if not soup.find("h1"):
            body = soup.find("body")
            if body:
                h1_tag = soup.new_tag("h1")
                h1_tag.string = "–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                body.insert(0, h1_tag)
        
        # –î–æ–±–∞–≤–ª—è–µ–º alt –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        images = soup.find_all("img")
        for img in images:
            if not img.get("alt"):
                img["alt"] = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å AI-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"
        
        return str(soup)


class SimpleRealtimeIntegrator:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π real-time –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä"""
    
    def __init__(self):
        self.seo_analyzer = SimpleSEOAnalyzer()
        self.ai_service = SimpleAIService()
        self.stats = {
            "optimizations_performed": 0,
            "ai_suggestions_generated": 0,
            "total_improvements": 0
        }
    
    async def start_realtime_optimization(self, html, context=None, target_keywords=None, progress_callback=None):
        """–ó–∞–ø—É—Å–∫ real-time –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        start_time = datetime.now()
        
        if progress_callback:
            await progress_callback({"message": "–ù–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...", "progress": 10})
        
        # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        initial_analysis = self.seo_analyzer.analyze_html(html)
        print(f"üìä –ü–µ—Ä–≤–∏—á–Ω—ã–π SEO –±–∞–ª–ª: {initial_analysis['score']}")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(initial_analysis['issues'])}")
        
        if progress_callback:
            await progress_callback({"message": "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...", "progress": 40})
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        optimized_html = await self._apply_auto_fixes(html, initial_analysis)
        
        if progress_callback:
            await progress_callback({"message": "–ü–æ–ª—É—á–µ–Ω–∏–µ AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...", "progress": 70})
        
        # AI —É–ª—É—á—à–µ–Ω–∏—è
        if initial_analysis['score'] < 70:
            ai_suggestions = await self.ai_service.suggest_improvements(optimized_html)
            self.stats["ai_suggestions_generated"] += 1
            print(f"ü§ñ AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {ai_suggestions}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º AI —É–ª—É—á—à–µ–Ω–∏—è
            optimized_html = await self.ai_service.enhance_content(optimized_html)
        
        if progress_callback:
            await progress_callback({"message": "–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...", "progress": 90})
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        final_analysis = self.seo_analyzer.analyze_html(optimized_html)
        
        if progress_callback:
            await progress_callback({"message": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ!", "progress": 100})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats["optimizations_performed"] += 1
        improvement = final_analysis['score'] - initial_analysis['score']
        if improvement > 0:
            self.stats["total_improvements"] += improvement
        
        processing_time = (datetime.now() - start_time).total_seconds()
        
        return {
            "initial_analysis": initial_analysis,
            "final_analysis": final_analysis,
            "optimized_html": optimized_html,
            "improvement": improvement,
            "processing_time": processing_time,
            "stats": self.stats.copy()
        }
    
    async def _apply_auto_fixes(self, html, analysis):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        soup = BeautifulSoup(html, "html.parser")
        
        # –î–æ–±–∞–≤–ª—è–µ–º viewport –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if "viewport" in str(analysis['issues']):
            head = soup.find("head")
            if head and not soup.find("meta", attrs={"name": "viewport"}):
                viewport_tag = soup.new_tag("meta", attrs={
                    "name": "viewport",
                    "content": "width=device-width, initial-scale=1.0"
                })
                head.append(viewport_tag)
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω viewport meta —Ç–µ–≥")
        
        # –î–æ–±–∞–≤–ª—è–µ–º lang –∞—Ç—Ä–∏–±—É—Ç
        if "lang –∞—Ç—Ä–∏–±—É—Ç" in str(analysis['issues']):
            html_tag = soup.find("html")
            if html_tag and not html_tag.get("lang"):
                html_tag["lang"] = "ru"
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω lang –∞—Ç—Ä–∏–±—É—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º charset –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if not soup.find("meta", attrs={"charset": True}):
            head = soup.find("head")
            if head:
                charset_tag = soup.new_tag("meta", attrs={"charset": "UTF-8"})
                head.insert(0, charset_tag)
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω charset")
        
        # –î–æ–±–∞–≤–ª—è–µ–º loading="lazy" –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        images = soup.find_all("img")
        for img in images:
            if not img.get("loading"):
                img["loading"] = "lazy"
        
        if images:
            print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({len(images)} —à—Ç.)")
        
        return str(soup)


async def demo_optimization():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø REAL-TIME SEO AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π HTML —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    bad_html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Test</title>
    </head>
    <body>
        <h2>Some content</h2>
        <p>Very short content.</p>
        <img src="test.jpg">
    </body>
    </html>
    """
    
    integrator = SimpleRealtimeIntegrator()
    
    # Callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    async def progress_callback(data):
        print(f"üìà {data['progress']}% - {data['message']}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    result = await integrator.start_realtime_optimization(
        html=bad_html,
        context={"title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"},
        target_keywords=["—Ç–µ—Å—Ç", "–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"],
        progress_callback=progress_callback
    )
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['processing_time']:.2f} —Å–µ–∫")
    print(f"üìä SEO –±–∞–ª–ª: {result['initial_analysis']['score']} ‚Üí {result['final_analysis']['score']} (+{result['improvement']})")
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(result['initial_analysis']['issues']) - len(result['final_analysis']['issues'])}")
    
    print(f"\nüìù –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô HTML:")
    print("-" * 40)
    print(result['optimized_html'])
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    stats = result['stats']
    print(f"   –í—Å–µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats['optimizations_performed']}")
    print(f"   AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats['ai_suggestions_generated']}")
    print(f"   –û–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è: {stats['total_improvements']}")


async def demo_websocket_simulation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è WebSocket-–ø–æ–¥–æ–±–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
    print("\n\nüåê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø WEBSOCKET –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    
    class MockWebSocket:
        def __init__(self):
            self.messages = []
        
        async def send_message(self, data):
            self.messages.append(data)
            print(f"üì° WebSocket –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: {data['type']} - {data.get('message', '')}")
    
    mock_ws = MockWebSocket()
    integrator = SimpleRealtimeIntegrator()
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è
    client_message = {
        "type": "start_optimization",
        "html": "<html><head><title>WS Test</title></head><body><p>Content</p></body></html>",
        "context": {"title": "WebSocket Test"}
    }
    
    print(f"üì® –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: {client_message['type']}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    async def ws_progress_callback(data):
        await mock_ws.send_message({
            "type": "optimization_progress",
            "message": data['message'],
            "progress": data['progress']
        })
    
    result = await integrator.start_realtime_optimization(
        html=client_message['html'],
        context=client_message['context'],
        progress_callback=ws_progress_callback
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await mock_ws.send_message({
        "type": "optimization_completed",
        "result": {
            "seo_score": result['final_analysis']['score'],
            "improvement": result['improvement'],
            "processing_time": result['processing_time']
        }
    })
    
    print(f"\nüìä WebSocket —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(mock_ws.messages)}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    await demo_optimization()
    await demo_websocket_simulation()
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)
    print("\nüí° –≠—Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç real-time –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    print("   –º–µ–∂–¥—É SEO –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º –∏ AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º.")
    print("\nüîó –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ HTML")
    print("   - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("   - AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
    print("   - WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è UI")
    print("   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")


if __name__ == "__main__":
    asyncio.run(main())
