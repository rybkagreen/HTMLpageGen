#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ real-time SEO AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É SEO Analyzer –∏ AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º
–≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
"""

import asyncio
import uuid
from datetime import datetime

from app.modules.seo.realtime_integration import realtime_integrator


# –¢–µ—Å—Ç–æ–≤—ã–π HTML —Å –ø–ª–æ—Ö–∏–º SEO
BAD_SEO_HTML = """
<!DOCTYPE html>
<html>
<head>
    <title>Test</title>
</head>
<body>
    <h2>Some content</h2>
    <p>This is a very short content.</p>
    <img src="test.jpg">
    <a href="http://example.com">Link</a>
</body>
</html>
"""

# HTML —Å –Ω–µ–ø–ª–æ—Ö–∏–º SEO –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
GOOD_SEO_HTML = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö - –ù–∞—à –°–∞–π—Ç</title>
    <meta name="description" content="–£–∑–Ω–∞–π—Ç–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤.">
</head>
<body>
    <h1>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –±—É–¥—É—â–µ–µ</h1>
    <h2>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h2>
    <p>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–ø–æ—Å–æ–±—ã —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. 
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —É–ª—É—á—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç 
    –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.</p>
    
    <h2>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</h2>
    <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 
    –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, 
    –ª—É—á—à—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø–æ–≤—ã—à–µ–Ω–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</p>
    
    <img src="technology.jpg" alt="–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –¥–µ–π—Å—Ç–≤–∏–∏" loading="lazy">
    
    <p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –ø–æ—Å–µ—Ç–∏—Ç–µ 
    <a href="/services">—Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ª—É–≥</a> –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π 
    <a href="/contact">—Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>.</p>
</body>
</html>
"""

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
CONTENT_CONTEXT = {
    "title": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
    "description": "–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
    "url": "https://example.com/modern-tech-seo",
    "author": "–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
    "type": "article",
    "image": "https://example.com/images/tech-seo.jpg",
    "site_name": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ü–æ—Ä—Ç–∞–ª"
}

TARGET_KEYWORDS = [
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
    "–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", 
    "SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
    "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
    "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"
]


async def progress_callback(data):
    """Callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print(f"[{data['timestamp']}] {data['message']} - {data['progress']}%")


async def test_bad_html_optimization():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–ª–æ—Ö–æ–≥–æ HTML"""
    print("=" * 80)
    print("–¢–ï–°–¢: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è HTML —Å –ø–ª–æ—Ö–∏–º SEO")
    print("=" * 80)
    
    session_id = str(uuid.uuid4())
    
    try:
        result = await realtime_integrator.start_realtime_optimization(
            session_id=session_id,
            initial_html=BAD_SEO_HTML,
            context=CONTENT_CONTEXT,
            target_keywords=TARGET_KEYWORDS,
            progress_callback=progress_callback
        )
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['processing_time']:.2f} —Å–µ–∫")
        print(f"üîÑ –¶–∏–∫–ª–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {result['optimization_result']['cycles_performed']}")
        print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–µ–Ω–∏–π: {result['optimization_result']['total_improvements']}")
        
        initial_score = result['initial_analysis'].get('seo_score', result['initial_analysis'].get('score', 0))
        final_score = result['optimization_result']['final_analysis'].get('seo_score', 
                      result['optimization_result']['final_analysis'].get('score', 0))
        
        print(f"üìä SEO –±–∞–ª–ª: {initial_score} ‚Üí {final_score} (+{final_score - initial_score})")
        
        print("\nüîß –ü–†–ò–ú–ï–ù–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        for step in result['optimization_result']['optimization_steps']:
            if step['auto_fixes']:
                print(f"  –¶–∏–∫–ª {step['cycle']}:")
                for fix in step['auto_fixes']:
                    print(f"    ‚úÖ {fix}")
        
        print(f"\nüìù –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô HTML ({len(result['optimization_result']['optimized_html'])} —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 40)
        print(result['optimization_result']['optimized_html'][:500] + "..." if len(result['optimization_result']['optimized_html']) > 500 else result['optimization_result']['optimized_html'])
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return None


async def test_good_html_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ö–æ—Ä–æ—à–µ–≥–æ HTML"""
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢: –ê–Ω–∞–ª–∏–∑ HTML —Å —Ö–æ—Ä–æ—à–∏–º SEO")
    print("=" * 80)
    
    session_id = str(uuid.uuid4())
    
    try:
        result = await realtime_integrator.start_realtime_optimization(
            session_id=session_id,
            initial_html=GOOD_SEO_HTML,
            context=CONTENT_CONTEXT,
            target_keywords=TARGET_KEYWORDS,
            progress_callback=progress_callback
        )
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['processing_time']:.2f} —Å–µ–∫")
        
        initial_score = result['initial_analysis'].get('seo_score', result['initial_analysis'].get('score', 0))
        final_score = result['optimization_result']['final_analysis'].get('seo_score', 
                      result['optimization_result']['final_analysis'].get('score', 0))
        
        print(f"üìä SEO –±–∞–ª–ª: {initial_score} ‚Üí {final_score}")
        
        if result['optimization_result']['cycles_performed'] > 0:
            print(f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –º–∏–Ω–æ—Ä–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π: {result['optimization_result']['total_improvements']}")
        else:
            print("‚úÖ HTML —É–∂–µ —Ö–æ—Ä–æ—à–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω, —É–ª—É—á—à–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        return None


async def test_system_stats():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("\n" + "=" * 80)
    print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 80)
    
    stats = realtime_integrator.get_system_stats()
    
    print(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats['optimizations_performed']}")
    print(f"ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats['ai_suggestions_generated']}")
    print(f"üîÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤: {stats['total_cycles']}")
    print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['average_processing_time']:.2f} —Å–µ–∫")
    print(f"üìà –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç SEO –±–∞–ª–ª–æ–≤: {stats['average_score_improvement']:.1f}")
    print(f"üéõÔ∏è  –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats['active_sessions_count']}")
    
    print("\n‚öôÔ∏è  –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    config = stats['config']
    print(f"  üìä –ü–æ—Ä–æ–≥ –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {config['min_score_threshold']}")
    print(f"  üîÑ –õ–∏–º–∏—Ç —Ü–∏–∫–ª–æ–≤: {config['optimization_cycles_limit']}")
    print(f"  ü§ñ –ü–æ—Ä–æ–≥ –¥–ª—è AI: {config['ai_suggestions_threshold']}")
    print(f"  ‚ö° –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if config['auto_optimization'] else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")


async def test_event_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π"""
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢: –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π")
    print("=" * 80)
    
    events_received = []
    
    async def event_handler(data):
        events_received.append(data)
        print(f"üì° –°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {data}")
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    realtime_integrator.add_event_callback("analysis_complete", event_handler)
    realtime_integrator.add_event_callback("optimization_applied", event_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    session_id = str(uuid.uuid4())
    short_html = "<html><head><title>Test</title></head><body><h1>Test</h1></body></html>"
    
    await realtime_integrator.start_realtime_optimization(
        session_id=session_id,
        initial_html=short_html,
        context={"title": "Test Page"},
        target_keywords=["test"],
        progress_callback=None
    )
    
    print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events_received)}")
    
    # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
    realtime_integrator.remove_event_callback("analysis_complete", event_handler)
    realtime_integrator.remove_event_callback("optimization_applied", event_handler)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í REAL-TIME SEO AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now()}")
    
    # –¢–µ—Å—Ç 1: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–æ—Ö–æ–≥–æ HTML
    await test_bad_html_optimization()
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await asyncio.sleep(1)
    
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ —Ö–æ—Ä–æ—à–µ–≥–æ HTML
    await test_good_html_analysis()
    
    # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    await test_system_stats()
    
    # –¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
    await test_event_system()
    
    print("\n" + "=" * 80)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("=" * 80)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final_stats = realtime_integrator.get_system_stats()
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {final_stats['optimizations_performed']}")
    print(f"   AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {final_stats['ai_suggestions_generated']}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {final_stats['average_processing_time']:.2f} —Å–µ–∫")


if __name__ == "__main__":
    asyncio.run(main())
