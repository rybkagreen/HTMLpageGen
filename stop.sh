#!/bin/bash

# üõë –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ HTMLPageGen
# –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[‚úÖ]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†Ô∏è]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚ùå]${NC} $1"
}

echo -e "${BLUE}"
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTMLPageGen"
echo "======================="
echo -e "${NC}"

print_status "–ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
stop_process() {
    local process_name="$1"
    local search_pattern="$2"
    
    local pids=$(ps aux | grep "$search_pattern" | grep -v grep | awk '{print $2}')
    
    if [[ -n "$pids" ]]; then
        print_status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ $process_name..."
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (SIGTERM)
        echo "$pids" | xargs kill -TERM 2>/dev/null || true
        sleep 3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
        local remaining=$(ps aux | grep "$search_pattern" | grep -v grep | awk '{print $2}')
        
        if [[ -n "$remaining" ]]; then
            print_warning "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ $process_name..."
            echo "$remaining" | xargs kill -KILL 2>/dev/null || true
            sleep 1
        fi
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        local final_check=$(ps aux | grep "$search_pattern" | grep -v grep | awk '{print $2}')
        if [[ -z "$final_check" ]]; then
            print_success "$process_name –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å $process_name"
        fi
    else
        print_warning "$process_name –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Backend (FastAPI/uvicorn)
stop_process "Backend (FastAPI)" "uvicorn app.main:app"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Frontend (Next.js)
stop_process "Frontend (Next.js)" "next-server"
stop_process "Frontend (npm)" "npm run dev"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
stop_process "Node.js processes" "node.*next"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤..."

# –ü–æ—Ä—Ç 8000 (Backend)
if nc -z localhost 8000 2>/dev/null; then
    print_warning "–ü–æ—Ä—Ç 8000 –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç"
    lsof -ti:8000 | xargs kill -9 2>/dev/null || true
else
    print_success "–ü–æ—Ä—Ç 8000 –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω"
fi

# –ü–æ—Ä—Ç 3000 (Frontend)
if nc -z localhost 3000 2>/dev/null; then
    print_warning "–ü–æ—Ä—Ç 3000 –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç"
    lsof -ti:3000 | xargs kill -9 2>/dev/null || true
else
    print_success "–ü–æ—Ä—Ç 3000 –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω"
fi

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
print_status "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –±–æ–ª—å—à–∏–µ
if [[ -f "backend.log" ]] && [[ $(stat -f%z "backend.log" 2>/dev/null || stat -c%s "backend.log" 2>/dev/null || echo 0) -gt 10485760 ]]; then
    mv backend.log "backend.log.$(date +%Y%m%d_%H%M%S)"
    print_success "–°—Ç–∞—Ä—ã–π backend.log –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω"
fi

if [[ -f "frontend.log" ]] && [[ $(stat -f%z "frontend.log" 2>/dev/null || stat -c%s "frontend.log" 2>/dev/null || echo 0) -gt 10485760 ]]; then
    mv frontend.log "frontend.log.$(date +%Y%m%d_%H%M%S)"
    print_success "–°—Ç–∞—Ä—ã–π frontend.log –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω"
fi

# –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Node.js –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
if [[ -d "frontend/.next" ]]; then
    NEXT_SIZE=$(du -sm frontend/.next 2>/dev/null | cut -f1)
    if [[ $NEXT_SIZE -gt 500 ]]; then
        print_status "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Next.js ($NEXT_SIZE MB)..."
        rm -rf frontend/.next
        print_success "–ö—ç—à Next.js –æ—á–∏—â–µ–Ω"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python/Node
print_status "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."

PYTHON_PROCS=$(ps aux | grep -E "(python.*uvicorn|uvicorn.*python)" | grep -v grep | wc -l)
NODE_PROCS=$(ps aux | grep -E "(node.*next|next.*node|npm.*dev)" | grep -v grep | wc -l)

if [[ $PYTHON_PROCS -eq 0 ]] && [[ $NODE_PROCS -eq 0 ]]; then
    print_success "–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã HTMLPageGen –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    print_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:"
    if [[ $PYTHON_PROCS -gt 0 ]]; then
        echo "  Python/uvicorn: $PYTHON_PROCS"
    fi
    if [[ $NODE_PROCS -gt 0 ]]; then
        echo "  Node.js/Next: $NODE_PROCS"
    fi
fi

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
print_status "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏..."

MEMORY_USAGE=$(free | awk '/^Mem:/ {printf "%.1f", $3/$2 * 100.0}')
echo -e "${BLUE}  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEMORY_USAGE}%${NC}"

DISK_USAGE=$(df -h . | awk 'NR==2 {print $5}' | sed 's/%//')
DISK_AVAILABLE=$(df -h . | awk 'NR==2 {print $4}')
echo -e "${BLUE}  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${DISK_USAGE}% (—Å–≤–æ–±–æ–¥–Ω–æ: ${DISK_AVAILABLE})${NC}"

# –°–≤–æ–¥–∫–∞
echo -e "\n${GREEN}‚úÖ HTMLPageGen –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"

echo -e "\n${BLUE}üìã –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:${NC}"
echo -e "  üîÑ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–Ω–æ–≤–∞: ${YELLOW}./start.sh${NC}"
echo -e "  üîç –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${YELLOW}./diagnose.sh${NC}"
echo -e "  üîß –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ backend.log –∏ frontend.log"

if [[ -f "backend.log" ]] || [[ -f "frontend.log" ]]; then
    echo -e "  üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:"
    if [[ -f "backend.log" ]]; then
        echo -e "    - Backend: ${YELLOW}tail backend.log${NC}"
    fi
    if [[ -f "frontend.log" ]]; then
        echo -e "    - Frontend: ${YELLOW}tail frontend.log${NC}"
    fi
fi

# –°–æ–≤–µ—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
if (( $(echo "$MEMORY_USAGE > 70" | bc -l) 2>/dev/null )); then
    echo -e "\n${YELLOW}üí° –°–æ–≤–µ—Ç: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ ($MEMORY_USAGE%)${NC}"
    echo -e "   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"
fi

echo -e "\n${GREEN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}\n"
