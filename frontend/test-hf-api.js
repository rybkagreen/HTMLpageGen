// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Hugging Face API
// –ó–∞–ø—É—Å–∫: node test-hf-api.js

const fetch = require('node-fetch');

const HF_TOKEN = process.env.HF_TOKEN || 'your_hugging_face_token_here';

async function testHuggingFaceAPI() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Hugging Face API...');
  console.log('üìç URL: https://router.huggingface.co/featherless-ai/v1/chat/completions');
  console.log('ü§ñ –ú–æ–¥–µ–ª—å: deepseek-ai/DeepSeek-R1-Distill-Qwen-14B');
  
  if (HF_TOKEN === 'your_hugging_face_token_here') {
    console.log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è HF_TOKEN');
    console.log('   export HF_TOKEN=your_actual_token');
    return;
  }

  try {
    const response = await fetch('https://router.huggingface.co/featherless-ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${HF_TOKEN}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages: [
          {
            role: 'user',
            content: '–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!" –∏ —Å—Ç–∏–ª—è–º–∏ CSS'
          }
        ],
        model: 'deepseek-ai/DeepSeek-R1-Distill-Qwen-14B',
        stream: false,
        temperature: 0.7,
        max_tokens: 1000
      })
    });

    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', errorText);
      return;
    }

    const data = await response.json();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!');
    console.log('üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞:');
    console.log(data.choices[0].message.content);
    
    if (data.usage) {
      console.log('üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:', data.usage);
    }

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:', error.message);
  }
}

// –¢–∞–∫–∂–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π API —Ä–æ—É—Ç
async function testLocalAPI() {
  console.log('\nüè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API —Ä–æ—É—Ç–∞...');
  
  try {
    const response = await fetch('http://localhost:3000/api/huggingface', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages: [
          {
            role: 'user',
            content: '–°–æ–∑–¥–∞–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'
          }
        ],
        stream: false,
        temperature: 0.7,
        max_tokens: 1000
      })
    });

    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      const errorData = await response.json();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API:', errorData);
      return;
    }

    const data = await response.json();
    console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    
    if (data.success) {
      console.log('üìù –û—Ç–≤–µ—Ç AI:', data.message.substring(0, 200) + '...');
    } else {
      console.log('‚ùå API –æ—à–∏–±–∫–∞:', data.message);
    }

  } catch (error) {
    console.log('‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
  }
}

async function main() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Hugging Face API\n');
  
  // –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ API
  await testHuggingFaceAPI();
  
  // –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–æ—É—Ç–∞
  await testLocalAPI();
  
  console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

main().catch(console.error);
